1. Select all employees from the 'Engineering' department.

σ_{department\_name='Engineering'}(employees ⨝ departments)


2. Perform a projection to display only the first names and salaries of all employees.

Π_{first\_name, salary}(employees)


3. Find employees who are managers.

σ_{manager\_id IS NOT NULL}(departments)


4.Perform a selection to retrieve employees earning a salary greater than ?60000.

σ_{salary > 60000}(employees)


5. Join employees with their respective departments.

employees ⨝_{employees.department\_id = departments.department\_id} departments


6. Perform a Cartesian product between employees and projects.

employees × projects


7.Find employees who are not managers.

π_{emp\_id, first\_name, last\_name, salary, department\_id} (employees) - π_{manager\_id} (departments)


8. Perform a natural join between departments and projects.

departments ⨝ projects


9.Project the department names and locations from the departments table.

Π_{department\_name, location}(departments)


10.Perform a selection to retrieve projects with budgets greater than ?100000.

σ_{budget > 100000}(projects)


11. Find employees who are managers in the 'Sales' department.

σ_{department\_name='Sales' AND manager\_id IS NOT NULL}(departments)


12. Perform a union operation between two sets of employees from the 'Engineering' and 'Finance' departments.

π_{emp\_id, first\_name, last\_name, salary, department\_id} (σ_{department\_name='Engineering'}(employees)) ∪ π_{emp\_id, first\_name, last\_name, salary, department\_id} (σ_{department\_name='Finance'}(employees))


13.Find employees who are not assigned to any projects.

employees - (employees ⨝ projects)


14.Perform a join operation to display employees along with their project assignments.

employees ⨝_{employees.emp\_id = projects.emp\_id} projects


15.Find employees whose salaries are not within the range ?50000 to ?70000.

σ_{salary < 50000 OR salary > 70000}(employees)
